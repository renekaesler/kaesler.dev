<x-toc>
  <div class="summary" data-title="Table of Contents">Table of Contents</div>
  <div class="list"></div>
</x-toc>

<script>// @ts-nocheck
  import { XContent } from "#src/custom-elements/x-content.js";

  class XToc extends HTMLElement {
    connectedCallback() {
      const list = this.querySelector('.list');
      const summary = this.querySelector('.summary');

      summary.addEventListener('click', () => this.toggleAttribute('open'));

      XContent.subscribe('content', ({ target, changes }) => {
        if (changes.includes('outline')) {
          list.innerHTML = this.createOutline(target.outline());
          target.activeSections().then(h => this.highlight(h));
        }

        if (changes.includes('activity')) {
          target.activeSections().then(h => this.highlight(h));
        }
      })
    }

    createOutline(sections) {
      return sections?.length 
        ? `<ol>
            ${sections.map(s => `
              <li>
                <a href="#${s.headline.id}">${s.headline.innerText}</a>
                ${this.createOutline(s.children)}
              </li>
            `).join('')}
          </ol>`
        : '';
    }

    highlight(headlines) {

      const summary = this.querySelector('.summary');
      summary.innerText = headlines.length 
        ? headlines.at(-1).innerText
        : summary.dataset.title

      this.querySelectorAll('a').forEach(a => {
        const id = a.getAttribute('href').substring(1);

        const method = headlines?.[0]?.id === id
          ? 'add'
          : 'remove';

        a.classList[method]('active');
      });
    }
  }

  customElements.define('x-toc', XToc);
</script>


<style>
  x-toc {
    display: block;
    padding-inline-start: 1em;

    > .list { display: none; }

    &[open] {
      > .summary { list-style: disclosure-open; }
      > .list { display: block; }
    }

    .section { display: none; }

    x-sticky[stuck] & {
      .title { display: none; }
      .section { display: inline; }
    }
  }

  .summary {
    display: list-item;
    cursor: pointer;
    font-weight: bolder;
    list-style: disclosure-closed;
  }

  .list {
    :global(ol) { list-style: none; }

    > :global(ol) { padding-inline-start: 0; }

    :global(a) { color: var(--text); }

    :global(.active):not(:hover) { color: var(--accent) }
  }

  @media screen and (width < 1100px) {
    x-toc { padding-block: var(--space-2xs); }
    .list { margin-block-start: .5em; }
  }

  @media screen and (width >= 1100px) {
    .summary { display: none; }
    x-toc .list { display: block; }
  }
</style>
